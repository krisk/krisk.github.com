<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Kiro.me</title>
    <description>Web Development</description>
    <link>http://kiro.me</link>
    
      <item>
        <title>Map and Set</title>
        <description>&lt;h2 id='map_and_weakmap'&gt;Map and WeakMap&lt;/h2&gt;

&lt;p&gt;Basically, weak maps are &lt;em&gt;unordered tables mapping objects to value&lt;/em&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;wm&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;WeakMap&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='nx'&gt;obj&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{};&lt;/span&gt;
&lt;span class='c1'&gt;// API:&lt;/span&gt;
&lt;span class='nx'&gt;wm&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;obj&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='nx'&gt;wm&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;obj&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;    &lt;span class='c1'&gt;// 1&lt;/span&gt;
&lt;span class='nx'&gt;wm&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;has&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;obj&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;    &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;span class='nx'&gt;wm&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='k'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;obj&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='whats_the_point'&gt;What&amp;#8217;s the point?&lt;/h3&gt;

&lt;p&gt;Retrieval Garbage Collection&lt;/p&gt;

&lt;p&gt;Often times you&amp;#8217;ll find it necessary to attach aribrary values to objects. The most common approach is to augment the object itself with an &lt;em&gt;expando&lt;/em&gt; property, and assign it the value:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;foo&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){}&lt;/span&gt;

&lt;span class='c1'&gt;// expando property&lt;/span&gt;
&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;data&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='nx'&gt;bar&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){},&lt;/span&gt;
  &lt;span class='nx'&gt;obj&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;foo&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;While the expando approach may be straightforward, it runs the risk of circular references and memory leaks.&lt;/p&gt;

&lt;p&gt;it is also invasive, as it modifies the original object. This may not always be desired if you&amp;#8217;re coding with encapsulation, modularization, and readability in mind. An alternative solution is to instead create an object that serves as a mapping between a key and value, where each key is an object:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;map&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{};&lt;/span&gt;
&lt;span class='nx'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nx'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='c1'&gt;// &amp;quot;baz&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This approach is also quite straightforward, but it may not always be optimal. The main issue is that properties on objects are complex entities: you can create properties with setters/getters, enumerability, writability, and configurability. While this may not be of concern if your mapping object is light, it can&lt;/p&gt;

&lt;p&gt;For efficient look-ups, an array is usually the optimal choice.&lt;/p&gt;

&lt;p&gt;Items in arrays , At the underlying engine level this allows for a lot more optimization in terms of organizing the memory that represents the structure.&lt;/p&gt;

&lt;p&gt;The more keys you insert in the mapping, the slower the retrieval may be.&lt;/p&gt;
&lt;aside&gt;
  Remember that in JavaScript, objects and arrays are handled almost identically.  In fact, an &lt;code&gt;Array&lt;/code&gt; is a special kind of &lt;code&gt;Object&lt;/code&gt;.
&lt;/aside&gt;
&lt;p&gt;A more optimal solution is to instead use two arrays: one for keys, and one for values:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;keys&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[];&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;vals&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[];&lt;/span&gt;

&lt;span class='nx'&gt;keys&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;push&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='nx'&gt;vals&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;push&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

&lt;span class='c1'&gt;// Retrieve the value stored for foo&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;keys&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;indexOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='nx'&gt;vals&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='c1'&gt;// &amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The bene&lt;/p&gt;

&lt;p&gt;This approach has t&lt;/p&gt;

&lt;p&gt;The problem is that&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;
  &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(){}&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;WeakMaps answer an inherit problem in JavaScript.&lt;/p&gt;

&lt;p&gt;Neither keys nor values in a weak map are held strongly. That is, the presence of a mapping k â‡’ v in a reachable weak map m does not by itself make k or v reachable.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;wm&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;WeakMap&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;obj&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{};&lt;/span&gt;
  &lt;span class='nx'&gt;wm&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;obj&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Weak maps do not contain strong references to their keys and values. Instead, weak maps extend the notion of reachability for garbage collection with the following rule: for each key-value pair (k,v) in a reachable weak map, if k is reachable then v is reachable.&lt;/p&gt;

&lt;p&gt;Because of references being weak, WeakMap keys are not enumerable (i.e. there is no method giving you a list of the keys). If they were, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should maintain it yourself. There is also an ECMAScript proposal aiming at introducing simple sets and maps which would not use weak references and would be enumerable.&lt;/p&gt;

&lt;p&gt;Consider the following WeakMap implementation:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;WeakMap&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;keys&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[];&lt;/span&gt;
  &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;vals&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[];&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt; * Return whatever value was most recently associated with key,&lt;/span&gt;
&lt;span class='cm'&gt; * or undefined if absent.&lt;/span&gt;
&lt;span class='cm'&gt; * Run time: O(n)&lt;/span&gt;
&lt;span class='cm'&gt; */&lt;/span&gt;
&lt;span class='nx'&gt;WeakMap&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;get&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;TypeError&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;key must be an object&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;keys&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;indexOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;?&lt;/span&gt; &lt;span class='kc'&gt;undefined&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;vals&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt; * Return true if the key exists, false otherwise&lt;/span&gt;
&lt;span class='cm'&gt; * Run time: O(n)&lt;/span&gt;
&lt;span class='cm'&gt; */&lt;/span&gt;
&lt;span class='nx'&gt;WeakMap&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;has&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;TypeError&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;key must be an object&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;keys&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;indexOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt; * Put the key,value association into the table&lt;/span&gt;
&lt;span class='cm'&gt; * Run time: O(n)&lt;/span&gt;
&lt;span class='cm'&gt; */&lt;/span&gt;
&lt;span class='nx'&gt;WeakMap&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;set&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;val&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;TypeError&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;key must be an object&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;keys&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;indexOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;keys&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;length&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;keys&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;vals&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;val&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt; * Remove key from the map&lt;/span&gt;
&lt;span class='cm'&gt; * Run time: O(n)&lt;/span&gt;
&lt;span class='cm'&gt; */&lt;/span&gt;
&lt;span class='nx'&gt;WeakMap&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='k'&gt;delete&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;TypeError&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;key must be an object&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;keys&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;indexOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;keys&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;splice&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// remove the key&lt;/span&gt;
  &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;vals&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;splice&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// remove the value&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Leaky O(N) executable spec for what is hopefully a non-leaky O(1) implementation.&lt;/p&gt;

&lt;h3 id='whats_the_point_of_weakmap'&gt;What&amp;#8217;s the point of WeakMap?&lt;/h3&gt;

&lt;p&gt;The details of Garbal Collection is implementation specific.&lt;/p&gt;

&lt;p&gt;when you allocate objects, you really are allocating memory. Only, you are not doing that explicitly. You can allocate an array, and make it behave like a memory buffer, but that will degrade javascript performance drastically: javascript arrays are not in-memory buffers, they are also objects (like everything else&lt;/p&gt;

&lt;p&gt;The JavaScript runtime automatically garbage collects objects when their value is set to null. However, setting an object to null doesnâ€™t remove the variable that references the object from memory. Using delete ensures that this memory is reclaimed in addition to the memory used by the object itself. (It is also easier to see places where your allocations and deallocations are unbalanced if you explicitly call delete.)&lt;/p&gt;

&lt;h2 id='map'&gt;Map&lt;/h2&gt;

&lt;h2 id='set'&gt;Set&lt;/h2&gt;</description>
        <published>Tue Jul 10 00:00:00 -0700 2012</published>
        <link>http://kiro.me/blog/map_set.html</link>
      </item>
    
      <item>
        <title>Know your JavaScript</title>
        <description>&lt;h3 id='is_it_enough_these_days_to_be_familiar_with_a_javascript_library_but_not_an_expert_in_native_javascript'&gt;Is it enough these days to be familiar with a JavaScript library but not an expert in native JavaScript?&lt;/h3&gt;

&lt;p&gt;To me, web development is fundamentally an engineering profession.&lt;/p&gt;

&lt;p&gt;JavaScript is a loosely typed, dynamic language, and thus it is by its very nature extremely forgiving. Because of this, youâ€™ll find a plethora of JavaScript solutions, libraries, tools, plugins - all implemented with anti-patterns, in obtuse and nebulous ways.&lt;/p&gt;

&lt;p&gt;The Web development world, unlike the accreditation-backed Engineering profession, is quite welcoming to everyone (which is fantastic, I believe). Ergo, youâ€™ll come across a multitude of individuals that do not have a computer science and/or engineering background, that for the most part, can be a great stepping stone to understanding key programming concepts.&lt;/p&gt;

&lt;p&gt;After all, JavaScript is a programming language.&lt;/p&gt;

&lt;p&gt;Of course, that is not to say that only people with a computer science/engineering background can become great JavaScript developers. I personally know many individuals who are brilliant JS developers, and yet have absolutely no formal CS/Engineering background. Are they the exception, not the norm? I donâ€™t know, and frankly it doesnâ€™t matter to me, and it shouldnâ€™t matter, period. What matters is the product (be it their code, design, etcâ€¦) they produce, and not whatever education helped them concretize their products.&lt;/p&gt;

&lt;p&gt;However, what I can confidently say is that understanding native JavaScript is critical to improving oneâ€™s web development skills. Understanding prototype chaining ensures that library authors have their inheritance model in check. OOP, scoping, even tagging items for garbage collection are some of the concepts that separate basic web development from advanced web development.&lt;/p&gt;

&lt;p&gt;Knowing jQuery, MooTools, or other libraries out there does not make one a superb web developer (I emphasize the superlative) - any more than driving a sports car makes one a superb race-car driver.&lt;/p&gt;

&lt;p&gt;Nonetheless, one could argue that knowing everything about native JS isnâ€™t necessary to becoming a great web developer. Perhaps being an expert in jQuery or MooTools is enough? I pose this as a question, as I do not know a definitive answer. But, if youâ€™re a Java or C++ expert, could you code your products (and understand how) in their lower level languages, Java Bytecode and Assembly respectively? One thingâ€™s for certain - knowing these lower level languages will make a Java or C++ programmerâ€™s skills shine even more.&lt;/p&gt;

&lt;p&gt;But of course, itâ€™s important to note that all these JS utility libraries are relatively new, and as such they have a long way to go before they can even think of replacing native JavaScript. Because of this, and the evolution they are bound to go through, I think that web developers should have a certain level of native JavaScript knowledge. It doesnâ€™t have to be a guru-like understanding, but everyone should possess a certain level of familiarity.&lt;/p&gt;

&lt;p&gt;Be passionate and inquisitive about the code you write. It is these qualities, I believe, that drive an individual to search for the answers on how and why things work they way they do. If someone is passionate about jQuery, they will want to know exactly what their selectors are doing behind the scenes. Every discovery will lead them to a deeper understanding of the native language.&lt;/p&gt;</description>
        <published>Sun Jul 01 00:00:00 -0700 2012</published>
        <link>http://kiro.me/blog/web_dev.html</link>
      </item>
    
      <item>
        <title>NaN and typeof</title>
        <description>&lt;p&gt;&lt;em&gt;After writing the &lt;a href='/blog/typeof_null.html'&gt;previous post&lt;/a&gt; in which I attempted to explain &lt;code&gt;typeof null&lt;/code&gt;, a few people had &lt;a href='http://news.ycombinator.com/item?id=4144679'&gt;questioned&lt;/a&gt; &lt;code&gt;NaN&lt;/code&gt;&amp;#8217;s behavior with the same operator (i.e., &lt;code&gt;typeof NaN&lt;/code&gt;). Therefore, I&amp;#8217;ve decided to write a similar post about this familiar, but often misunderstood, property.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;First, &lt;code&gt;NaN&lt;/code&gt; is not a keyword (unlike &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, etc..), &lt;strong&gt;it is a property of the global object&lt;/strong&gt;. The value of &lt;code&gt;NaN&lt;/code&gt; is the same as the value of &lt;code&gt;Number.NaN&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kc'&gt;NaN&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// NaN&lt;/span&gt;
&lt;span class='nb'&gt;Number&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='kc'&gt;NaN&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;There are several ways in which &lt;code&gt;NaN&lt;/code&gt; can happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Division of zero by zero&lt;/li&gt;

&lt;li&gt;Dividing an infinity by an infinity&lt;/li&gt;

&lt;li&gt;Multiplication of an infinity by a zero&lt;/li&gt;

&lt;li&gt;Any operation in which &lt;code&gt;NaN&lt;/code&gt; is an operand&lt;/li&gt;

&lt;li&gt;Converting a non-numeric string or &lt;code&gt;undefined&lt;/code&gt; into a number&lt;/li&gt;
&lt;/ol&gt;
&lt;aside&gt;
  If you're interested in why &lt;code&gt;0/0 = NaN&lt;/code&gt;, read this &lt;a target='_blank' href='http://www.newton.dep.anl.gov/askasci/math99/math99259.htm'&gt;discussion&lt;/a&gt;.  Even mathematicians are undecided.
&lt;/aside&gt;
&lt;h2 id='why_does__return_'&gt;Why does &lt;code&gt;typeof NaN&lt;/code&gt; return &lt;code&gt;&quot;number&quot;&lt;/code&gt;?&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='kc'&gt;NaN&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// &amp;quot;number&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The ECMAScript standard states that Numbers should be IEEE-754 floating point data. This includes &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt;, and also &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By definition, &lt;code&gt;NaN&lt;/code&gt; is the return value from operations which have an &lt;strong&gt;undefined numerical result&lt;/strong&gt;. Hence why, in JavaScript, aside from being part of the global object, it is also part of the Number object: &lt;code&gt;Number.NaN&lt;/code&gt;. &lt;strong&gt;It is still a numeric data type&lt;/strong&gt;, but it is undefined as a &lt;a href='http://en.wikipedia.org/wiki/Real_number'&gt;real number&lt;/a&gt;.&lt;/p&gt;
&lt;aside&gt;
  &lt;code&gt;NaN&lt;/code&gt; also represents any number outside of the ECMAScript &lt;a target='_blank' href='http://bclary.com/2004/11/07/#a-8.5'&gt;domain of definition.&lt;/a&gt;
&lt;/aside&gt;
&lt;h3 id='computer_arithmetic_is_limited'&gt;Computer arithmetic is limited&lt;/h3&gt;

&lt;p&gt;Consider the following operation:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;3.2317006071311&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='nx'&gt;e616&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mf'&gt;3.2317006071311&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='nx'&gt;e616&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As &lt;a target='_blank' href='http://en.wikipedia.org/wiki/Real_number'&gt;Wikipedia&lt;/a&gt; states, &lt;em&gt;computer arithmetic cannot directly operate on real numbers, but only on a finite subset of rational numbers, limited by the number of bits used to store them&lt;/em&gt;. In ordinary arithmetic, 3.2317006071311 * 10&lt;sup&gt;616&lt;/sup&gt; is a real finite number, but, by ECMAScript standards, it is simply too large (i.e, considerably greater than &lt;code&gt;Number.MAX_VALUE&lt;/code&gt;), and is therefore represented as &lt;code&gt;Infinity&lt;/code&gt;. Attempting to divide an infinity by an infinity yields &lt;code&gt;NaN&lt;/code&gt;. Of course, in ordinary arithmetic, since both operands are finite, the operation clearly equals 1.&lt;/p&gt;

&lt;p&gt;In this case, the &lt;code&gt;NaN&lt;/code&gt; is in place of a real number that it could not compute (i.e, 1) due to the size of the operands. It would seem counter-intuitive if &lt;code&gt;typeof NaN&lt;/code&gt; were to return something other than &lt;code&gt;&quot;number&quot;&lt;/code&gt;. After all, in this example, &lt;code&gt;NaN&lt;/code&gt; simply represents a value which could not be determined by computer arithmetic.&lt;/p&gt;
&lt;aside&gt;
  The value 3.2317006071311 * 10&lt;sup&gt;616&lt;/sup&gt; was computed by taking &lt;code&gt;Number.MAX_VALUE&lt;/code&gt; and squaring it manually, in ordinary arithmetic.
&lt;/aside&gt;
&lt;h2 id='_is_unordered'&gt;&lt;code&gt;NaN&lt;/code&gt; is unordered&lt;/h2&gt;

&lt;p&gt;According to the IEEE 754 floating-point standard, comparison with &lt;code&gt;NaN&lt;/code&gt; always returns an unordered result. That is, &lt;code&gt;NaN&lt;/code&gt; is not equal to, greater than, or less than anything, &lt;strong&gt;including itself&lt;/strong&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kc'&gt;NaN&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;    &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;span class='kc'&gt;NaN&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;    &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;span class='kc'&gt;NaN&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='kc'&gt;NaN&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;span class='c1'&gt;// But we can still check for NaN:&lt;/span&gt;
&lt;span class='nb'&gt;isNaN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;NaN&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is why you cannot determine whether a given value is &lt;code&gt;NaN&lt;/code&gt; by comparing it to &lt;code&gt;NaN&lt;/code&gt;, and instead you must use the &lt;code&gt;isNaN()&lt;/code&gt; function.&lt;/p&gt;
&lt;aside&gt;
  The &lt;em&gt;division of zero by a zero&lt;/em&gt; &lt;a target='_blank' href='http://www.newton.dep.anl.gov/askasci/math99/math99259.htm'&gt;discussion&lt;/a&gt; illustrates why &lt;code&gt;NaN != NaN&lt;/code&gt;: it is false to say that &quot;every number &lt;em&gt;x&lt;/em&gt; is equal to every number &lt;em&gt;x&lt;/em&gt;&quot;.  Since the value cannot be determined, it follows that the comparison cannot be determined, and thus the sentence is instrinsically and mathematically false.
&lt;/aside&gt;
&lt;p&gt;It is not surprising, then, that the native implementation of the function &lt;code&gt;isNaN()&lt;/code&gt; could be simply replaced with:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='c1'&gt;// Native implementation&lt;/span&gt;
&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nb'&gt;isNaN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='c1'&gt;// Coerce into number&lt;/span&gt;
  &lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;Number&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='c1'&gt;// if x is NaN, NaN != NaN is true, otherwise it&amp;#39;s false&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;aside&gt;
  The native implementation of &lt;code&gt;isNaN()&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; even if the value is &lt;code&gt;undefined&lt;/code&gt;, or if the value cannot be coerced into a primitive number data type.
&lt;/aside&gt;
&lt;p&gt;Of course, I wouldn&amp;#8217;t recommend replacing the native implementation. However, there are some libraries out there which introduce their own. For example, &lt;a target='blank' href='http://underscorejs.org/'&gt;Underscore&lt;/a&gt;&amp;#8217;s implementation is as follows:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='nx'&gt;_&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nb'&gt;isNaN&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;obj&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='c1'&gt;// `NaN` is the only value for which `===` is not reflexive.&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;obj&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='nx'&gt;obj&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But, its behavior is not same as the native &lt;code&gt;isNaN()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 	          &lt;span class='c1'&gt;// undefined&lt;/span&gt;
&lt;span class='nb'&gt;isNaN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;         &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;span class='nb'&gt;isNaN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;undefined&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;span class='nb'&gt;isNaN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;       &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;compared to Underscore&amp;#8217;s:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 	            &lt;span class='c1'&gt;// undefined&lt;/span&gt;
&lt;span class='nx'&gt;_&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nb'&gt;isNaN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;         &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;span class='nx'&gt;_&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nb'&gt;isNaN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;undefined&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;span class='nx'&gt;_&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nb'&gt;isNaN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;       &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I can&amp;#8217;t be certain, but I suppose Underscore included this implementation because you might be interested in checking that the value is indeed &lt;code&gt;NaN&lt;/code&gt;, since the &lt;strong&gt;only&lt;/strong&gt; value that satisfies an unequality check against itself is &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id='booleans_are_not_s'&gt;Booleans are NOT &lt;code&gt;NaN&lt;/code&gt;s&lt;/h3&gt;

&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='nb'&gt;isNaN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;  &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;span class='nb'&gt;isNaN&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is because booleans are considered and implemented as numerical values with a single binary digit (i.e., bit), thus they are coerced into their respective bit representations:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='nb'&gt;Number&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;  &lt;span class='c1'&gt;// 1&lt;/span&gt;
&lt;span class='nb'&gt;Number&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;hr /&gt;
&lt;h3 id='resources'&gt;Resources&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href='http://bclary.com/2004/11/07/#a-4.3.23'&gt;ECMAScript Language Specification - NaN&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/NaN'&gt;MDN - NaN&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://en.wikipedia.org/wiki/NaN'&gt;Wikipedia - NaN&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://en.wikipedia.org/wiki/Indeterminate_form'&gt;Wikipedia - Indeterminate Forms&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://en.wikipedia.org/wiki/Real_number'&gt;Wikipedia - Real number&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://en.wikipedia.org/wiki/IEEE_754-2008'&gt;Wikipedia - IEEE floating point&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://steve.hollasch.net/cgindex/coding/ieeefloat.html'&gt;IEEE Standard 754 Floating Point Numbers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
        <published>Wed Jun 27 00:00:00 -0700 2012</published>
        <link>http://kiro.me/blog/typeof_nan.html</link>
      </item>
    
      <item>
        <title>Null and typeof</title>
        <description>&lt;p&gt;The &lt;code&gt;typeof&lt;/code&gt; operator can be a little counter-intuitive. However, regardless of the confusion it may cause, the way it works is extremely straightforward: &lt;em&gt;return the type string of a given reference according to the table specified in &lt;a href='http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262%205th%20edition%20December%202009.pdf'&gt;ECMA-262&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;img class='es-table' src='/images/posts/typeof_table.png' /&gt;
&lt;h2 id='implementation'&gt;Implementation&lt;/h2&gt;

&lt;p&gt;The actual implementation varies depending on which engine you are running. The V8 (behind Chrome and Node.js) implementation of the &lt;code&gt;typeof&lt;/code&gt; operator (written in C++), is as follows (I&amp;#8217;ve added a few comments for clarification):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='c1'&gt;// Returns the type string of a value; see ECMA-262, 11.4.3&lt;/span&gt;
&lt;span class='nx'&gt;RUNTIME_FUNCTION&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;MaybeObject&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;Runtime_Typeof&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='nx'&gt;NoHandleAllocation&lt;/span&gt; &lt;span class='nx'&gt;ha&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

  &lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='nx'&gt;obj&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;args&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;obj&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;IsNumber&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;number_symbol&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
  &lt;span class='nx'&gt;HeapObject&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='nx'&gt;heap_obj&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;HeapObject&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nx'&gt;cast&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;obj&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

  &lt;span class='c1'&gt;// typeof an undetectable object is &amp;#39;undefined&amp;#39;&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;heap_obj&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;map&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;is_undetectable&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;undefined_symbol&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;

  &lt;span class='nx'&gt;InstanceType&lt;/span&gt; &lt;span class='nx'&gt;instance_type&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;heap_obj&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;map&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;instance_type&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;instance_type&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nx'&gt;FIRST_NONSTRING_TYPE&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// return &amp;quot;string&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;string_symbol&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;

  &lt;span class='k'&gt;switch&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;instance_type&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// oddbal types: true, false, null, undefined&lt;/span&gt;
    &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='nx'&gt;ODDBALL_TYPE&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;
      &lt;span class='c1'&gt;// true, false&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;heap_obj&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;IsTrue&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='nx'&gt;heap_obj&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;IsFalse&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='c1'&gt;// return &amp;quot;boolean&amp;quot;&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;boolean_symbol&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='c1'&gt;// null&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;heap_obj&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;IsNull&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;FLAG_harmony_typeof&lt;/span&gt;
            &lt;span class='c1'&gt;// return &amp;quot;null&amp;quot;&lt;/span&gt;
            &lt;span class='o'&gt;?&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;null_symbol&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
            &lt;span class='c1'&gt;// return &amp;quot;object&amp;quot;&lt;/span&gt;
            &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;object_symbol&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='nx'&gt;ASSERT&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;heap_obj&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;IsUndefined&lt;/span&gt;&lt;span class='p'&gt;());&lt;/span&gt;
      &lt;span class='c1'&gt;// return &amp;quot;undefined&amp;quot;&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;undefined_symbol&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
    &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='nx'&gt;JS_FUNCTION_TYPE&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;
    &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='nx'&gt;JS_FUNCTION_PROXY_TYPE&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;
      &lt;span class='c1'&gt;// return &amp;quot;function&amp;quot;&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;function_symbol&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
    &lt;span class='k'&gt;default&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;
      &lt;span class='c1'&gt;// For any kind of object not handled above, the spec rule for&lt;/span&gt;
      &lt;span class='c1'&gt;// host objects gives that it is okay to return &amp;quot;object&amp;quot;&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;object_symbol&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;aside&gt;
  You can find the full file &lt;a target='_blank' href='http://code.google.com/searchframe#W9JxUuHYyMg/trunk/src/runtime.cc&amp;q=typeof%20null%20package:v8%5C.googlecode%5C.com'&gt;here&lt;/a&gt;
&lt;/aside&gt;
&lt;h2 id='why_does__return_'&gt;Why does &lt;code&gt;typeof null &lt;/code&gt; return &lt;code&gt;&quot;object&quot;&lt;/code&gt;?&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='c1'&gt;// What&amp;#39;s happening here?&lt;/span&gt;
&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The answer might disappoint some, but the truth is simply because the table above says to do so.&lt;/p&gt;

&lt;p&gt;The reasoning behind this is that &lt;code&gt;null&lt;/code&gt;, in contrast with &lt;code&gt;undefined&lt;/code&gt;, was (and still is) often used where objects appear. In other words, &lt;code&gt;null&lt;/code&gt; is often used to signify an empty reference to an object. When &lt;a href='http://en.wikipedia.org/wiki/Brendan_Eich'&gt;Brendan Eich&lt;/a&gt; created JavaScript, he followed the same paradigm, and it made sense (arguably) to return &lt;code&gt;&quot;object&quot;&lt;/code&gt;. In fact, the ECMAScript specification defines &lt;code&gt;null&lt;/code&gt; as the &lt;em&gt;primitive value that represents the intentional absence of any object value&lt;/em&gt; (ECMA-262, 11.4.11).&lt;/p&gt;

&lt;p&gt;There have been discussions in the ECMAScript working group (between Brendan Eich, Douglas Crockford, and a few other other individuals) proposing the following change:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;null&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;aside&gt;
  For the interested, you can read the &lt;a target='_blank' href='http://wiki.ecmascript.org/doku.php?id=discussion:typeof'&gt;discussion&lt;/a&gt; and &lt;a target='_blank' href='http://wiki.ecmascript.org/doku.php?id=proposals:typeof'&gt;proposal&lt;/a&gt;
&lt;/aside&gt;
&lt;p&gt;However, as Douglas Crockford &lt;a href='http://wiki.ecmascript.org/doku.php?id=proposals:typeof'&gt;pointed out&lt;/a&gt;, &lt;em&gt;&amp;#8220;I think it is too late to fix &lt;code&gt;typeof&lt;/code&gt;. The change proposed for &lt;code&gt;typeof null&lt;/code&gt; will break existing code.&amp;#8221;&lt;/em&gt; By &amp;#8220;existing code&amp;#8221; he means many incorrect implementations of type checks on the web, such as:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='c1'&gt;// This is extremely bad&lt;/span&gt;
&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;isNull&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;object&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Because of this, it was decided to leave &lt;code&gt;typeof&lt;/code&gt; alone.&lt;/p&gt;

&lt;h2 id='back_to_v8'&gt;Back to V8&lt;/h2&gt;

&lt;p&gt;If you actually read each line of the V8 &lt;code&gt;typeof&lt;/code&gt; operator implementation in &lt;code&gt;RUNTIME_FUNCTION&lt;/code&gt; above, you might have noticed that &lt;code&gt;FLAG_harmony_typeof&lt;/code&gt; check:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='c1'&gt;// null&lt;/span&gt;
&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;heap_obj&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;IsNull&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;FLAG_harmony_typeof&lt;/span&gt;
      &lt;span class='c1'&gt;// return &amp;quot;null&amp;quot;&lt;/span&gt;
      &lt;span class='o'&gt;?&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;null_symbol&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
      &lt;span class='c1'&gt;// return &amp;quot;object&amp;quot;&lt;/span&gt;
      &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;isolate&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;heap&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;object_symbol&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Assuming you have the V8 Canary build on your machine, you can run it with the &lt;code&gt;--harmony-typeof&lt;/code&gt; flag, which would essentially set the &lt;code&gt;FLAG_harmony_typeof&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Now, any &lt;code&gt;typeof null&lt;/code&gt; check is going to return &lt;code&gt;&quot;null&quot;&lt;/code&gt;.&lt;/p&gt;</description>
        <published>Thu Jun 21 00:00:00 -0700 2012</published>
        <link>http://kiro.me/blog/typeof_null.html</link>
      </item>
    
      <item>
        <title>The Wrapper Object</title>
        <description>&lt;h3 id='all_primitives_have_no_properties_strings_are_primitives_therefore_strings_have_no_properties'&gt;All primitives have no properties. Strings are primitives; therefore, Strings have no properties.&lt;/h3&gt;

&lt;p&gt;&lt;a href='http://en.wikipedia.org/wiki/Inference'&gt;Inference&lt;/a&gt; at its finest.&lt;/p&gt;

&lt;p&gt;Remember that a primitive data type is a non-composite building block. Essentially, it is a value, and as such it has no properties.&lt;/p&gt;

&lt;p&gt;Yes. Even in JavaScript, strings are considered primitive data types - they are &lt;strong&gt;not&lt;/strong&gt; objects. However, consider the following code:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;str&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;toUpperCase&lt;/span&gt;&lt;span class='p'&gt;());&lt;/span&gt; &lt;span class='c1'&gt;// --&amp;gt; HELLO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It appears that &lt;code&gt;str&lt;/code&gt; clearly has a &lt;code&gt;toUpperCase&lt;/code&gt; property. Was our inference incorrect? Specifically, &lt;em&gt;if strings are not objects, why do they have properties like &lt;code&gt;toUpperCase&lt;/code&gt;, &lt;code&gt;toLowerCase&lt;/code&gt;, etc&amp;#8230;?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Short answer: JavaScript promptly coerces between primitives and objects.&lt;/p&gt;

&lt;p&gt;Long answer: &lt;strong&gt;whenever you try to access a property of a string &lt;code&gt;str&lt;/code&gt;, JavaScript coerces the string value to an object, by &lt;code&gt;new String(str)&lt;/code&gt;.&lt;/strong&gt; This object is called a &lt;strong&gt;wrapper object&lt;/strong&gt;. It inherits all string methods, and is used to resolve the property reference. Once the property has been resolved, the wrapper object is discarded.&lt;/p&gt;

&lt;p&gt;(Note: the same concept applies to numbers and booleans)&lt;/p&gt;

&lt;p&gt;This is essentially the reason why the following piece of code yields an &lt;code&gt;undefined&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nx'&gt;str&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;custom&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;str&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;custom&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// -&amp;gt; undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s look at it in detail:&lt;/p&gt;

&lt;h4 id='step_1'&gt;Step 1&lt;/h4&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nx'&gt;str&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;custom&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;JavaScript creates a wrapper &lt;code&gt;String&lt;/code&gt; object, sets its &lt;code&gt;custom&lt;/code&gt; property to &lt;code&gt;1&lt;/code&gt;, and then discards it. Basically, it runs something like the following code:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;temp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nb'&gt;String&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;str&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// wrapper object&lt;/span&gt;
&lt;span class='nx'&gt;temp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;custom&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='c1'&gt;// end of the line for temp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The exact way it deals with it is really implementation specific, and you shouldn&amp;#8217;t have to think about it. Either way, if you examine &lt;code&gt;temp&lt;/code&gt; in Firebug, Chrome Developer Toolbar, or whatever debugging tool you use, you&amp;#8217;ll see something like the following:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='nb'&gt;String&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;
  &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;h&amp;quot;&lt;/span&gt;
  &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;e&amp;quot;&lt;/span&gt;
  &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;l&amp;quot;&lt;/span&gt;
  &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;l&amp;quot;&lt;/span&gt;
  &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;o&amp;quot;&lt;/span&gt;
  &lt;span class='nx'&gt;length&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;
  &lt;span class='nx'&gt;custom&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, the &lt;code&gt;custom&lt;/code&gt; property is set onto the &lt;code&gt;temp&lt;/code&gt; wrapper object.&lt;/p&gt;

&lt;h4 id='step_2'&gt;Step 2&lt;/h4&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;str&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;custom&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once again, JavaScript creates a wrapper &lt;code&gt;String&lt;/code&gt; object from the original, unmodified string value and then tries to read &lt;code&gt;custom&lt;/code&gt;. This property, of course, does not exist, and the expression evaluates to &lt;code&gt;undefined&lt;/code&gt;. Again, the wrapper object is then discarded.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Similarly, given all the info above, we can now see how&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;upper&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;str&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;toUpperCase&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;upper&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// --&amp;gt; HELLO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;basically translates to&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;upper&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nb'&gt;String&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;str&lt;/span&gt;&lt;span class='p'&gt;)).&lt;/span&gt;&lt;span class='nx'&gt;toUpperCase&lt;/span&gt;&lt;span class='p'&gt;().&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='coercion_as_necessary'&gt;Coercion as necessary&lt;/h3&gt;

&lt;p&gt;JavaScript coerces wrapper objects into the wrapped primitive values as necessary. The &lt;code&gt;==&lt;/code&gt; equality will treat a value and its wrapper object as equal, while the &lt;code&gt;===&lt;/code&gt; strict equality operator will treat them as different entities.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;             &lt;span class='c1'&gt;// primitive&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;b&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nb'&gt;String&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// wrapper object&lt;/span&gt;

&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='c1'&gt;// &amp;quot;string&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;b&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='c1'&gt;// &amp;quot;object&amp;quot;&lt;/span&gt;

&lt;span class='nx'&gt;a&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='nx'&gt;b&lt;/span&gt;  &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;span class='nx'&gt;a&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='nx'&gt;b&lt;/span&gt; &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id='numbers'&gt;Numbers&lt;/h4&gt;

&lt;p&gt;Same principle applies to numbers.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nb'&gt;Number&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='c1'&gt;// &amp;quot;number&amp;quot;&lt;/span&gt;
&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='c1'&gt;// &amp;quot;object&amp;quot;&lt;/span&gt;

&lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt;  &lt;span class='c1'&gt;// true&lt;/span&gt;
&lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt; &lt;span class='c1'&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;When it comes to numbers, however, JavaScript gives you more liberty. For starters, you can create your own &amp;#8220;number&amp;#8221;-like objects, and let type coercion resolve any numerical operation for you. For example:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='nx'&gt;num&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
  &lt;span class='nx'&gt;valueOf&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;num&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='nx'&gt;num&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
  &lt;span class='nx'&gt;valueOf&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;num&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As you can see from the above code, I did not explicitly convert &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to numbers, yet I was able to add them. This is because the addition coerced them into their primitive values. Basically, behind the scenes, JavaScript did the following:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;temp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;Number&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nb'&gt;Number&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;temp&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Remember that calling the &lt;code&gt;Number&lt;/code&gt; constructor without the &lt;code&gt;new&lt;/code&gt; operation basically attempts to convert a value into its primitive representation. The same goes for &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Boolean&lt;/code&gt; (though &lt;code&gt;Boolean&lt;/code&gt; is a little problematic - we&amp;#8217;ll deal with it in a later post perhaps).&lt;/p&gt;

&lt;p&gt;Having said that, JavaScript knows what the primitive value of my number-like object is because it looks for and executes the &lt;code&gt;valueOf&lt;/code&gt; method. As long as you have this method in your object (and assuming it returns a number), your object can be mathematically operated on (though, you should be warned, the &lt;code&gt;Number&lt;/code&gt; object of course has more methods than just &lt;code&gt;valueOf&lt;/code&gt;, such as &lt;code&gt;toExponential&lt;/code&gt;, &lt;code&gt;toFixed&lt;/code&gt;, &lt;code&gt;toLocaleString&lt;/code&gt;, &lt;code&gt;toPrecision&lt;/code&gt;, and &lt;code&gt;toString&lt;/code&gt;).&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id='resources'&gt;Resources&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href='http://bclary.com/2004/11/07/#a-4.3.16'&gt;ECMAScript Language Specification - Strings&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String'&gt;MDN - Strings&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
        <published>Sun Jun 10 00:00:00 -0700 2012</published>
        <link>http://kiro.me/blog/wrapper_objects.html</link>
      </item>
    
      <item>
        <title>Named Function Expressions and the IE dilemma</title>
        <description>&lt;p&gt;Every once in a while I come across the following syntax:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;(){})();&lt;/span&gt;         &lt;span class='c1'&gt;// instead of: (function (){})();&lt;/span&gt;

&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='p'&gt;(){})();&lt;/span&gt; &lt;span class='c1'&gt;// instead of: var x = (function (){})();&lt;/span&gt;

&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;z&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;w&lt;/span&gt;&lt;span class='p'&gt;(){};&lt;/span&gt;     &lt;span class='c1'&gt;// instead of: var z = function (){};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;All of the above are examples of &lt;em&gt;Named Function Expressions&lt;/em&gt; (NFEs), that is, they are &lt;em&gt;Function Expressions&lt;/em&gt; with an identifier (&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;w&lt;/code&gt; respectively).&lt;/p&gt;
&lt;aside&gt;
   &lt;a href='http://bclary.com/2004/11/07/#a-13' title='ECMAScript - Functions'&gt;Here's&lt;/a&gt; the ECMAScript definition of a Function Expression
&lt;/aside&gt;
&lt;p&gt;NFEs differ from their nameless counterparts in two ways: (1) they provide you visibility on the callstack during debugging, and (2) they give you the ability to recurse via the inner scope:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
  &lt;span class='c1'&gt;// Recurse on f&lt;/span&gt;
  &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='p'&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Both of these points are quite helpful. However, there&amp;#8217;s a few problems with NFEs in certain browsers. For the purpose of this article, I&amp;#8217;ll deal with IE &amp;lt;= 8.&lt;/p&gt;

&lt;h2 id='problems'&gt;Problems&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. The function expression identifier leaks into the enclosing scope&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;(){})();&lt;/span&gt;
&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// &amp;#39;function&amp;#39;&lt;/span&gt;

&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='p'&gt;(){};&lt;/span&gt;
&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// &amp;#39;function&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;According to the specifications, the identifier of NFEs should &lt;strong&gt;only&lt;/strong&gt; be available to its inner scope. However, in IE &amp;lt;= 8, it&amp;#8217;s available to the outer scope. Aside from leaks, it&amp;#8217;s dangerous and a debugging nightmare as it now pollutes another scope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. NFEs are treated as both function declarations and function expressions&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;g&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// --&amp;gt; &amp;#39;function&amp;#39;&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;g&lt;/span&gt;&lt;span class='p'&gt;(){};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In IE, the function declaration is hoisted to the top of the scope, thus giving you access to the declared function well before the assignment. Aside from completely violating ECMAscript specifications, it&amp;#8217;s also dangerous as you can potentially invoke functions which were never meant to exist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. NFEs create two distinct objects&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;g&lt;/span&gt;&lt;span class='p'&gt;(){};&lt;/span&gt;
&lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='nx'&gt;g&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// --&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Oddly enough, IE creates two distinct objects in memory. Augmenting one won&amp;#8217;t augment the other. Similarly, setting &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; will not make the same changes to &lt;code&gt;g&lt;/code&gt; (or vice-versa); therefore, if memory consuption is an issue, you&amp;#8217;d have to explicitly break reference to both functions in order for IE&amp;#8217;s Garbage Collection to free-up resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Function declarations are parsed sequentially, regardless of block execution&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='js'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;g&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='c1'&gt;// But.. this should never execute?&lt;/span&gt;
  &lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;g&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='c1'&gt;// Oh yes it doesâ€¦&lt;/span&gt;
&lt;span class='nx'&gt;g&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt; &lt;span class='c1'&gt;// --&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Well, it&amp;#8217;s obvious why that&amp;#8217;s bad. If you&amp;#8217;re going to set the value of a variable, conditionally, to a function; the function declared last will win. Of course, part of the problem is that we&amp;#8217;re attempting to use &lt;code&gt;g&lt;/code&gt; instead of &lt;code&gt;f&lt;/code&gt;, which is clearly bad programming practice.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id='resources'&gt;Resources&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href='http://bclary.com/2004/11/07/#a-13'&gt;ECMAScript Language Specification - Function Definition&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='https://developer.mozilla.org/en/JavaScript/Reference/Operators/function'&gt;MDN - Function&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
        <published>Sun Jun 03 00:00:00 -0700 2012</published>
        <link>http://kiro.me/blog/nfe_dilemma.html</link>
      </item>
    
  </channel>
</rss>